<?php

/**
 * This file is auto-generated by Saloon SDK Generator
 * Generator: SellingPartnerApi\Generator\Generators\RequestGenerator
 * Do not modify it directly.
 */

declare(strict_types=1);

namespace SellingPartnerApi\Seller\SellerWalletV20240301\Requests;

use Exception;
use Saloon\Enums\Method;
use Saloon\Http\Response;
use SellingPartnerApi\Request;
use SellingPartnerApi\Seller\SellerWalletV20240301\Responses\ErrorList;
use SellingPartnerApi\Seller\SellerWalletV20240301\Responses\TransferRatePreview;

/**
 * getTransferPreview
 */
class GetTransferPreview extends Request
{
    protected Method $method = Method::GET;

    /**
     * @param  string  $sourceCountryCode  Country code of the source transaction account in ISO 3166 format.
     * @param  string  $sourceCurrencyCode  Currency code of the source transaction country in ISO 4217 format.
     * @param  string  $destinationCountryCode  Country code of the destination transaction account in ISO 3166 format.
     * @param  string  $destinationCurrencyCode  Currency code of the destination transaction country in ISO 4217 format.
     * @param  float  $baseAmount  The base transaction amount without any markup fees.
     */
    public function __construct(
        protected string $sourceCountryCode,
        protected string $sourceCurrencyCode,
        protected string $destinationCountryCode,
        protected string $destinationCurrencyCode,
        protected float $baseAmount,
    ) {}

    public function resolveEndpoint(): string
    {
        return '/finances/transfers/wallet/2024-03-01/transferPreview';
    }

    public function createDtoFromResponse(Response $response): TransferRatePreview|ErrorList
    {
        $status = $response->status();
        $responseCls = match ($status) {
            200 => TransferRatePreview::class,
            400, 403, 404, 408, 413, 415, 429, 500, 503 => ErrorList::class,
            default => throw new Exception("Unhandled response status: {$status}")
        };

        return $responseCls::deserialize($response->json());
    }

    public function defaultQuery(): array
    {
        return array_filter([
            'sourceCountryCode' => $this->sourceCountryCode,
            'sourceCurrencyCode' => $this->sourceCurrencyCode,
            'destinationCountryCode' => $this->destinationCountryCode,
            'destinationCurrencyCode' => $this->destinationCurrencyCode,
            'baseAmount' => $this->baseAmount,
        ]);
    }
}
